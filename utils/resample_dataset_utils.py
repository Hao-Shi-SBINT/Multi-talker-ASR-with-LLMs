# Created by Hao at 2025-07-01
# resample_utils.py
# -----------------------------------------------------------
# Utility to (re)sample an Audio column in Hugging Face Datasets
# so its sampling rate matches that of a feature extractor.
#
# Usage:
#   from resample_utils import maybe_resample_dataset
#   raw_datasets = maybe_resample_dataset(
#       raw_datasets, data_args, feature_extractor
#   )
#
# Author: Auto-generated by ChatGPT
# -----------------------------------------------------------

import logging
import datasets

logger = logging.getLogger(__name__)


def maybe_resample_dataset(raw_datasets, data_args, feature_extractor):
    """
    If the audio columnâ€™s sampling rate differs from `feature_extractor`,
    cast the column to the target rate and return the updated dataset dict.

    Args
    ----
    raw_datasets:
        A `datasets.DatasetDict` whose values are `datasets.Dataset` objects.
    data_args:
        An args/Dataclass namespace exposing `audio_column_name`.
    feature_extractor:
        Hugging Face feature extractor with attribute `sampling_rate`.

    Returns
    -------
    datasets.DatasetDict
        The original or resampled dataset dict.
    """
    # 1) figure out current sampling rate from the first split
    print(raw_datasets)
    first_split = next(iter(raw_datasets.values()))
    audio_feature = first_split.features[data_args.audio_column_name]
    dataset_sr = audio_feature.sampling_rate

    logger.info(
        "Dataset sampling rate: %s Hz, target: %s Hz",
        dataset_sr,
        feature_extractor.sampling_rate,
    )

    # 2) resample if needed
    if dataset_sr != feature_extractor.sampling_rate:
        logger.info("Resampling Audio column to %s Hz ...",
                    feature_extractor.sampling_rate)

        raw_datasets = raw_datasets.cast_column(
            data_args.audio_column_name,
            datasets.features.Audio(
                sampling_rate=feature_extractor.sampling_rate
            ),
        )
        logger.info("Resampling complete.")

    else:
        logger.info("Sampling rate already matches; no resampling required.")

    return raw_datasets

